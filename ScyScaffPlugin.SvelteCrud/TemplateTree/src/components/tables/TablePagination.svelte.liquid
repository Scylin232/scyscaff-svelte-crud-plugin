<script lang="ts">
	import { page } from '$app/stores';
	import { goto } from '$app/navigation';
	import { getPaginationNumbers } from '$lib/getPaginationNumbers';

	export let data;

	let resultsPerPageInput = data.resultsPerPage;

	$: query = new URLSearchParams($page.url.searchParams.toString());
	$: totalPages = data.totalPages;
	$: currentPage = data.page;

	const handleResultsPerPage = () => {
		query.set('count', resultsPerPageInput.toString());
		query.set('page', '1');

		goto(`?${query}`);
	};

	const handlePageChange = (newPage: string | number) => {
		if (newPage <= 0 || newPage > totalPages) return;

		query.set('page', newPage.toString());

		goto(`?${query}`);
	};
</script>

<div class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 mt-4">
	<div class="flex flex-1 justify-between sm:hidden">
		<button on:click={() => handlePageChange(currentPage - 1)}
						type="button"
						class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">
			Previous
		</button>
		<p>{currentPage}</p>
		<button on:click={() => handlePageChange(currentPage + 1)}
						type="button"
						class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">
			Next
		</button>
	</div>

	<div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
		<div>
			<input
				class="inline-flex items-center text-gray-500 justify-center rounded-md border border-transparent bg-gray-200 px-4 py-2 text-sm font-medium shadow-sm hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto"
				type="number" placeholder="Entities..." bind:value={resultsPerPageInput} />
			<button on:click={handleResultsPerPage}
							type="button"
							class="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto">
				Submit
			</button>
		</div>

		<div>
			<nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
				<button on:click={() => handlePageChange(currentPage - 1)}
								type="button"
								class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
					<span class="sr-only">Previous</span>
					<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
						<path fill-rule="evenodd"
									d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z"
									clip-rule="evenodd" />
					</svg>
				</button>

				{#each getPaginationNumbers(totalPages, currentPage) as page}
					<button on:click={() => handlePageChange(page)}
									type="button"
									class="relative inline-flex items-center px-4 py-2 text-sm font-semibold {page === currentPage ? 'bg-indigo-600 text-white' : 'text-gray-900'} ring-1 ring-inset ring-gray-300 {page !== currentPage ? 'hover:bg-gray-50' : ''} focus:z-20 focus:outline-offset-0">{page}</button>
				{/each}

				<button on:click={() => handlePageChange(currentPage + 1)}
								type="button"
								class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
					<span class="sr-only">Next</span>
					<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
						<path fill-rule="evenodd"
									d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z"
									clip-rule="evenodd" />
					</svg>
				</button>
			</nav>
		</div>
	</div>
</div>