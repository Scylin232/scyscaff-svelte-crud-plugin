import { JWT_SECRET, REDIRECT_URL, AUTH0_ID, AUTH0_ISSUER, AUTH0_AUDIENCE, AUTH0_SECRET } from '$env/static/private';
import { SvelteKitAuth } from '@auth/sveltekit';
import Auth0 from '@auth/sveltekit/providers/auth0';

export const { handle, signIn, signOut } = SvelteKitAuth({
	secret: JWT_SECRET,
	redirectProxyUrl: REDIRECT_URL,
	providers: [Auth0({
		clientId: AUTH0_ID,
		clientSecret: AUTH0_SECRET,
		issuer: AUTH0_ISSUER,
		authorization: {
			params: {
				scope: 'openid email profile offline_access',
				audience: encodeURI(AUTH0_AUDIENCE)
			}
		}
	})],
	callbacks: {
		async jwt({ token, account, profile }: { token: any, account: any, profile: any }) {
			if (profile)
				token.is_admin = profile.userRoles?.includes("admin") || false;

			if (account) {
				return {
					...token,
					access_token: account.access_token,
					refresh_token: account.refresh_token,
					expires_at: account.expires_at,
				}
			} else if (token.expires_at && (Date.now() / 1000) < token.expires_at) {
				return token;
			} else {
				try {
					if (!token.refresh_token) throw token.refresh_token;

					const response = await fetch(`${AUTH0_ISSUER}/oauth/token`, {
						headers: {
							"Content-Type": "application/x-www-form-urlencoded",
						},
						body: new URLSearchParams({
							client_id: AUTH0_ID,
							client_secret: AUTH0_SECRET,
							grant_type: "refresh_token",
							refresh_token: token.refresh_token,
						}),
						method: "POST"
					});

					const newToken = await response.json();

					if (!response.ok) throw newToken;

					return {
						...token,
						access_token: newToken.access_token,
						refresh_token: newToken.refresh_token ?? token.refresh_token,
						expires_at: Math.floor((Date.now() / 1000) + newToken.expires_in),
					}
				} catch (error) {
					console.error("Error refreshing access token: ", error);

					return {...token, error: "RefreshAccessTokenError" as const}
				}
			}
		},
		async session({ session, token }: { session: any, token: any }) {
			if (token) {
				session.is_admin = token.is_admin;
				session.access_token = token.access_token;
			}

			return session;
		},
	},
});